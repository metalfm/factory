// Code generated by fcgen; DO NOT EDIT.

package fc_entity

import (
	context "context"
	entity "factory/internal/tests/entity"
	fmt "fmt"
	atomic "sync/atomic"
	time "time"
)

type factoryOrder struct {
	entity       *entity.Order
	seq          func(e *entity.Order)
	seqInt       func(e *entity.Order)
	seqInt64     func(e *entity.Order)
	onCreate     func(ctx context.Context, e *entity.Order) error
	onID         func(e *entity.Order)
	setID        bool
	onUUID       func(e *entity.Order)
	setUUID      bool
	onStatus     func(e *entity.Order)
	setStatus    bool
	onSrc        func(e *entity.Order)
	setSrc       bool
	onDst        func(e *entity.Order)
	setDst       bool
	onUser       func(e *entity.Order)
	setUser      bool
	onCreatedAt  func(e *entity.Order)
	setCreatedAt bool
	onUpdateAt   func(e *entity.Order)
	setUpdateAt  bool
}

func NewFactoryOrder(e entity.Order) *factoryOrder {
	return &factoryOrder{
		entity:      &e,
		seq:         func(e *entity.Order) {},
		seqInt:      func(e *entity.Order) {},
		seqInt64:    func(e *entity.Order) {},
		onCreate:    func(ctx context.Context, e *entity.Order) error { return nil },
		onID:        func(e *entity.Order) {},
		onUUID:      func(e *entity.Order) {},
		onStatus:    func(e *entity.Order) {},
		onSrc:       func(e *entity.Order) {},
		onDst:       func(e *entity.Order) {},
		onUser:      func(e *entity.Order) {},
		onCreatedAt: func(e *entity.Order) {},
		onUpdateAt:  func(e *entity.Order) {},
	}
}

func (slf *factoryOrder) ID(v uint64) *factoryOrder {
	slf.entity.ID = v
	slf.setID = true
	return slf
}

func (slf *factoryOrder) OnID(fn func(e *entity.Order)) *factoryOrder {
	slf.onID = fn
	return slf
}

func (slf *factoryOrder) UUID(v int) *factoryOrder {
	slf.entity.UUID = v
	slf.setUUID = true
	return slf
}

func (slf *factoryOrder) OnUUID(fn func(e *entity.Order)) *factoryOrder {
	slf.onUUID = fn
	return slf
}

func (slf *factoryOrder) Status(v entity.Status) *factoryOrder {
	slf.entity.Status = v
	slf.setStatus = true
	return slf
}

func (slf *factoryOrder) OnStatus(fn func(e *entity.Order)) *factoryOrder {
	slf.onStatus = fn
	return slf
}

func (slf *factoryOrder) Src(v string) *factoryOrder {
	slf.entity.Src = v
	slf.setSrc = true
	return slf
}

func (slf *factoryOrder) OnSrc(fn func(e *entity.Order)) *factoryOrder {
	slf.onSrc = fn
	return slf
}

func (slf *factoryOrder) Dst(v string) *factoryOrder {
	slf.entity.Dst = v
	slf.setDst = true
	return slf
}

func (slf *factoryOrder) OnDst(fn func(e *entity.Order)) *factoryOrder {
	slf.onDst = fn
	return slf
}

func (slf *factoryOrder) User(v *entity.User) *factoryOrder {
	slf.entity.User = v
	slf.setUser = true
	return slf
}

func (slf *factoryOrder) OnUser(fn func(e *entity.Order)) *factoryOrder {
	slf.onUser = fn
	return slf
}

func (slf *factoryOrder) CreatedAt(v time.Time) *factoryOrder {
	slf.entity.CreatedAt = v
	slf.setCreatedAt = true
	return slf
}

func (slf *factoryOrder) OnCreatedAt(fn func(e *entity.Order)) *factoryOrder {
	slf.onCreatedAt = fn
	return slf
}

func (slf *factoryOrder) UpdateAt(v *time.Time) *factoryOrder {
	slf.entity.UpdateAt = v
	slf.setUpdateAt = true
	return slf
}

func (slf *factoryOrder) OnUpdateAt(fn func(e *entity.Order)) *factoryOrder {
	slf.onUpdateAt = fn
	return slf
}

func (slf *factoryOrder) Seq(fn func(e *entity.Order)) *factoryOrder {
	slf.seq = fn
	return slf
}

func (slf *factoryOrder) SeqInt(fn func(e *entity.Order, n int)) *factoryOrder {
	var seq int32
	slf.seqInt = func(e *entity.Order) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryOrder) SeqInt64(fn func(e *entity.Order, n int64)) *factoryOrder {
	var seq int64
	slf.seqInt64 = func(e *entity.Order) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryOrder) OnCreate(fn func(ctx context.Context, e *entity.Order) error) *factoryOrder {
	slf.onCreate = fn
	return slf
}

func (slf *factoryOrder) MustBuild() entity.Order {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryOrder) MustBuildCtx(ctx context.Context) entity.Order {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setID {
		slf.onID(slf.entity)
	}

	if !slf.setUUID {
		slf.onUUID(slf.entity)
	}

	if !slf.setStatus {
		slf.onStatus(slf.entity)
	}

	if !slf.setSrc {
		slf.onSrc(slf.entity)
	}

	if !slf.setDst {
		slf.onDst(slf.entity)
	}

	if !slf.setUser {
		slf.onUser(slf.entity)
	}

	if !slf.setCreatedAt {
		slf.onCreatedAt(slf.entity)
	}

	if !slf.setUpdateAt {
		slf.onUpdateAt(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
