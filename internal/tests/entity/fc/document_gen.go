// Code generated by fcgen; DO NOT EDIT.

package fc_entity

import (
	context "context"
	fmt "fmt"
	entity "github.com/metalfm/factory/internal/tests/entity"
	atomic "sync/atomic"
	time "time"
)

type factoryDocument[T entity.Payloader] struct {
	entity       *entity.Document[T]
	seq          func(e *entity.Document[T])
	seqInt       func(e *entity.Document[T])
	seqInt64     func(e *entity.Document[T])
	onCreate     func(ctx context.Context, e *entity.Document[T]) error
	onID         func(e *entity.Document[T])
	setID        bool
	onPayload    func(e *entity.Document[T])
	setPayload   bool
	onCreatedAt  func(e *entity.Document[T])
	setCreatedAt bool
}

func NewFactoryDocument[T entity.Payloader](e entity.Document[T]) *factoryDocument[T] {
	return &factoryDocument[T]{
		entity:      &e,
		seq:         func(e *entity.Document[T]) {},
		seqInt:      func(e *entity.Document[T]) {},
		seqInt64:    func(e *entity.Document[T]) {},
		onCreate:    func(ctx context.Context, e *entity.Document[T]) error { return nil },
		onID:        func(e *entity.Document[T]) {},
		onPayload:   func(e *entity.Document[T]) {},
		onCreatedAt: func(e *entity.Document[T]) {},
	}
}

func (slf *factoryDocument[T]) ID(v uint64) *factoryDocument[T] {
	slf.entity.ID = v
	slf.setID = true
	return slf
}

func (slf *factoryDocument[T]) OnID(fn func(e *entity.Document[T])) *factoryDocument[T] {
	slf.onID = fn
	return slf
}

func (slf *factoryDocument[T]) Payload(v T) *factoryDocument[T] {
	slf.entity.Payload = v
	slf.setPayload = true
	return slf
}

func (slf *factoryDocument[T]) OnPayload(fn func(e *entity.Document[T])) *factoryDocument[T] {
	slf.onPayload = fn
	return slf
}

func (slf *factoryDocument[T]) CreatedAt(v time.Time) *factoryDocument[T] {
	slf.entity.CreatedAt = v
	slf.setCreatedAt = true
	return slf
}

func (slf *factoryDocument[T]) OnCreatedAt(fn func(e *entity.Document[T])) *factoryDocument[T] {
	slf.onCreatedAt = fn
	return slf
}

func (slf *factoryDocument[T]) Seq(fn func(e *entity.Document[T])) *factoryDocument[T] {
	slf.seq = fn
	return slf
}

func (slf *factoryDocument[T]) SeqInt(fn func(e *entity.Document[T], n int)) *factoryDocument[T] {
	var seq int32
	slf.seqInt = func(e *entity.Document[T]) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryDocument[T]) SeqInt64(fn func(e *entity.Document[T], n int64)) *factoryDocument[T] {
	var seq int64
	slf.seqInt64 = func(e *entity.Document[T]) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryDocument[T]) OnCreate(fn func(ctx context.Context, e *entity.Document[T]) error) *factoryDocument[T] {
	slf.onCreate = fn
	return slf
}

func (slf *factoryDocument[T]) MustBuild() entity.Document[T] {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryDocument[T]) MustBuildCtx(ctx context.Context) entity.Document[T] {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setID {
		slf.onID(slf.entity)
	}

	if !slf.setPayload {
		slf.onPayload(slf.entity)
	}

	if !slf.setCreatedAt {
		slf.onCreatedAt(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
