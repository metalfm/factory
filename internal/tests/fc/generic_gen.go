// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	entity "factory/internal/tests/entity"
	fmt "fmt"
	atomic "sync/atomic"
)

type factoryGeneric[T0 any, T1 any, E entity.Document[P], P entity.Payloader, G tests.Gen[entity.Document[P]]] struct {
	entity       *tests.Generic[T0, T1, E, P, G]
	seq          func(e *tests.Generic[T0, T1, E, P, G])
	seqInt       func(e *tests.Generic[T0, T1, E, P, G])
	seqInt64     func(e *tests.Generic[T0, T1, E, P, G])
	onCreate     func(ctx context.Context, e *tests.Generic[T0, T1, E, P, G]) error
	onField0     func(e *tests.Generic[T0, T1, E, P, G])
	setField0    bool
	onDocument0  func(e *tests.Generic[T0, T1, E, P, G])
	setDocument0 bool
	onDocument1  func(e *tests.Generic[T0, T1, E, P, G])
	setDocument1 bool
	onDocument2  func(e *tests.Generic[T0, T1, E, P, G])
	setDocument2 bool
	onP1         func(e *tests.Generic[T0, T1, E, P, G])
	setP1        bool
	onP2         func(e *tests.Generic[T0, T1, E, P, G])
	setP2        bool
	onP3         func(e *tests.Generic[T0, T1, E, P, G])
	setP3        bool
	onP4         func(e *tests.Generic[T0, T1, E, P, G])
	setP4        bool
	onP5         func(e *tests.Generic[T0, T1, E, P, G])
	setP5        bool
	onG0         func(e *tests.Generic[T0, T1, E, P, G])
	setG0        bool
}

func NewFactoryGeneric[T0 any, T1 any, E entity.Document[P], P entity.Payloader, G tests.Gen[entity.Document[P]]](e tests.Generic[T0, T1, E, P, G]) *factoryGeneric[T0, T1, E, P, G] {
	return &factoryGeneric[T0, T1, E, P, G]{
		entity:      &e,
		seq:         func(e *tests.Generic[T0, T1, E, P, G]) {},
		seqInt:      func(e *tests.Generic[T0, T1, E, P, G]) {},
		seqInt64:    func(e *tests.Generic[T0, T1, E, P, G]) {},
		onCreate:    func(ctx context.Context, e *tests.Generic[T0, T1, E, P, G]) error { return nil },
		onField0:    func(e *tests.Generic[T0, T1, E, P, G]) {},
		onDocument0: func(e *tests.Generic[T0, T1, E, P, G]) {},
		onDocument1: func(e *tests.Generic[T0, T1, E, P, G]) {},
		onDocument2: func(e *tests.Generic[T0, T1, E, P, G]) {},
		onP1:        func(e *tests.Generic[T0, T1, E, P, G]) {},
		onP2:        func(e *tests.Generic[T0, T1, E, P, G]) {},
		onP3:        func(e *tests.Generic[T0, T1, E, P, G]) {},
		onP4:        func(e *tests.Generic[T0, T1, E, P, G]) {},
		onP5:        func(e *tests.Generic[T0, T1, E, P, G]) {},
		onG0:        func(e *tests.Generic[T0, T1, E, P, G]) {},
	}
}

func (slf *factoryGeneric[T0, T1, E, P, G]) Field0(v T1) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.Field0 = v
	slf.setField0 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnField0(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onField0 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) Document0(v E) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.Document0 = v
	slf.setDocument0 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnDocument0(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onDocument0 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) Document1(v entity.Document[P]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.Document1 = v
	slf.setDocument1 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnDocument1(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onDocument1 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) Document2(v entity.Document[entity.PayloadCreditNote]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.Document2 = v
	slf.setDocument2 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnDocument2(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onDocument2 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) P1(v tests.Payloader[any]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.P1 = v
	slf.setP1 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnP1(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onP1 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) P2(v tests.Payloader[**any]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.P2 = v
	slf.setP2 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnP2(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onP2 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) P3(v tests.Payloader[entity.PayloadCreditNote]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.P3 = v
	slf.setP3 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnP3(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onP3 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) P4(v tests.Payloader[T0]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.P4 = v
	slf.setP4 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnP4(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onP4 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) P5(v tests.Payloader[P]) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.P5 = v
	slf.setP5 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnP5(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onP5 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) G0(v G) *factoryGeneric[T0, T1, E, P, G] {
	slf.entity.G0 = v
	slf.setG0 = true
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnG0(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.onG0 = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) Seq(fn func(e *tests.Generic[T0, T1, E, P, G])) *factoryGeneric[T0, T1, E, P, G] {
	slf.seq = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) SeqInt(fn func(e *tests.Generic[T0, T1, E, P, G], n int)) *factoryGeneric[T0, T1, E, P, G] {
	var seq int32
	slf.seqInt = func(e *tests.Generic[T0, T1, E, P, G]) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) SeqInt64(fn func(e *tests.Generic[T0, T1, E, P, G], n int64)) *factoryGeneric[T0, T1, E, P, G] {
	var seq int64
	slf.seqInt64 = func(e *tests.Generic[T0, T1, E, P, G]) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) OnCreate(fn func(ctx context.Context, e *tests.Generic[T0, T1, E, P, G]) error) *factoryGeneric[T0, T1, E, P, G] {
	slf.onCreate = fn
	return slf
}

func (slf *factoryGeneric[T0, T1, E, P, G]) MustBuild() tests.Generic[T0, T1, E, P, G] {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryGeneric[T0, T1, E, P, G]) MustBuildCtx(ctx context.Context) tests.Generic[T0, T1, E, P, G] {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setField0 {
		slf.onField0(slf.entity)
	}

	if !slf.setDocument0 {
		slf.onDocument0(slf.entity)
	}

	if !slf.setDocument1 {
		slf.onDocument1(slf.entity)
	}

	if !slf.setDocument2 {
		slf.onDocument2(slf.entity)
	}

	if !slf.setP1 {
		slf.onP1(slf.entity)
	}

	if !slf.setP2 {
		slf.onP2(slf.entity)
	}

	if !slf.setP3 {
		slf.onP3(slf.entity)
	}

	if !slf.setP4 {
		slf.onP4(slf.entity)
	}

	if !slf.setP5 {
		slf.onP5(slf.entity)
	}

	if !slf.setG0 {
		slf.onG0(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
