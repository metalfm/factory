// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
)

type factoryArrayPtr struct {
	entity    *tests.ArrayPtr
	seq       func(e *tests.ArrayPtr)
	seqInt    func(e *tests.ArrayPtr)
	seqInt64  func(e *tests.ArrayPtr)
	onCreate  func(ctx context.Context, e *tests.ArrayPtr) error
	onArray0  func(e *tests.ArrayPtr)
	setArray0 bool
	onArray1  func(e *tests.ArrayPtr)
	setArray1 bool
	onArray2  func(e *tests.ArrayPtr)
	setArray2 bool
	onArray3  func(e *tests.ArrayPtr)
	setArray3 bool
	onArray4  func(e *tests.ArrayPtr)
	setArray4 bool
	onArray5  func(e *tests.ArrayPtr)
	setArray5 bool
	onArray6  func(e *tests.ArrayPtr)
	setArray6 bool
	onArray7  func(e *tests.ArrayPtr)
	setArray7 bool
	onArray8  func(e *tests.ArrayPtr)
	setArray8 bool
	onArray9  func(e *tests.ArrayPtr)
	setArray9 bool
}

func NewFactoryArrayPtr(e tests.ArrayPtr) *factoryArrayPtr {
	return &factoryArrayPtr{
		entity:   &e,
		seq:      func(e *tests.ArrayPtr) {},
		seqInt:   func(e *tests.ArrayPtr) {},
		seqInt64: func(e *tests.ArrayPtr) {},
		onCreate: func(ctx context.Context, e *tests.ArrayPtr) error { return nil },
		onArray0: func(e *tests.ArrayPtr) {},
		onArray1: func(e *tests.ArrayPtr) {},
		onArray2: func(e *tests.ArrayPtr) {},
		onArray3: func(e *tests.ArrayPtr) {},
		onArray4: func(e *tests.ArrayPtr) {},
		onArray5: func(e *tests.ArrayPtr) {},
		onArray6: func(e *tests.ArrayPtr) {},
		onArray7: func(e *tests.ArrayPtr) {},
		onArray8: func(e *tests.ArrayPtr) {},
		onArray9: func(e *tests.ArrayPtr) {},
	}
}

func (slf *factoryArrayPtr) Array0(v *[8.0]int) *factoryArrayPtr {
	slf.entity.Array0 = v
	slf.setArray0 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray0(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray0 = fn
	return slf
}

func (slf *factoryArrayPtr) Array1(v *[0x7f]uint) *factoryArrayPtr {
	slf.entity.Array1 = v
	slf.setArray1 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray1(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray1 = fn
	return slf
}

func (slf *factoryArrayPtr) Array2(v **['a']string) *factoryArrayPtr {
	slf.entity.Array2 = v
	slf.setArray2 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray2(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray2 = fn
	return slf
}

func (slf *factoryArrayPtr) Array3(v **['\x7f']bool) *factoryArrayPtr {
	slf.entity.Array3 = v
	slf.setArray3 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray3(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray3 = fn
	return slf
}

func (slf *factoryArrayPtr) Array4(v *[8.0]*int) *factoryArrayPtr {
	slf.entity.Array4 = v
	slf.setArray4 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray4(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray4 = fn
	return slf
}

func (slf *factoryArrayPtr) Array5(v *[0x7f]*uint) *factoryArrayPtr {
	slf.entity.Array5 = v
	slf.setArray5 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray5(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray5 = fn
	return slf
}

func (slf *factoryArrayPtr) Array6(v **['a']**string) *factoryArrayPtr {
	slf.entity.Array6 = v
	slf.setArray6 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray6(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray6 = fn
	return slf
}

func (slf *factoryArrayPtr) Array7(v **['\x7f']**bool) *factoryArrayPtr {
	slf.entity.Array7 = v
	slf.setArray7 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray7(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray7 = fn
	return slf
}

func (slf *factoryArrayPtr) Array8(v **[1][2]**any) *factoryArrayPtr {
	slf.entity.Array8 = v
	slf.setArray8 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray8(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray8 = fn
	return slf
}

func (slf *factoryArrayPtr) Array9(v **[1][2]func(a, b any) map[any]**func()) *factoryArrayPtr {
	slf.entity.Array9 = v
	slf.setArray9 = true
	return slf
}

func (slf *factoryArrayPtr) OnArray9(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.onArray9 = fn
	return slf
}

func (slf *factoryArrayPtr) Seq(fn func(e *tests.ArrayPtr)) *factoryArrayPtr {
	slf.seq = fn
	return slf
}

func (slf *factoryArrayPtr) SeqInt(fn func(e *tests.ArrayPtr, n int)) *factoryArrayPtr {
	var seq int32
	slf.seqInt = func(e *tests.ArrayPtr) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryArrayPtr) SeqInt64(fn func(e *tests.ArrayPtr, n int64)) *factoryArrayPtr {
	var seq int64
	slf.seqInt64 = func(e *tests.ArrayPtr) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryArrayPtr) OnCreate(fn func(ctx context.Context, e *tests.ArrayPtr) error) *factoryArrayPtr {
	slf.onCreate = fn
	return slf
}

func (slf *factoryArrayPtr) MustBuild() tests.ArrayPtr {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryArrayPtr) MustBuildCtx(ctx context.Context) tests.ArrayPtr {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setArray0 {
		slf.onArray0(slf.entity)
	}

	if !slf.setArray1 {
		slf.onArray1(slf.entity)
	}

	if !slf.setArray2 {
		slf.onArray2(slf.entity)
	}

	if !slf.setArray3 {
		slf.onArray3(slf.entity)
	}

	if !slf.setArray4 {
		slf.onArray4(slf.entity)
	}

	if !slf.setArray5 {
		slf.onArray5(slf.entity)
	}

	if !slf.setArray6 {
		slf.onArray6(slf.entity)
	}

	if !slf.setArray7 {
		slf.onArray7(slf.entity)
	}

	if !slf.setArray8 {
		slf.onArray8(slf.entity)
	}

	if !slf.setArray9 {
		slf.onArray9(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
