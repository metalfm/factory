// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	fmt "fmt"
	tests "github.com/metalfm/factory/internal/tests"
	atomic "sync/atomic"
)

type factoryObjEmbed struct {
	entity          *tests.ObjEmbed
	seq             func(e *tests.ObjEmbed)
	seqInt          func(e *tests.ObjEmbed)
	seqInt64        func(e *tests.ObjEmbed)
	onCreate        func(ctx context.Context, e *tests.ObjEmbed) error
	onStatus        func(e *tests.ObjEmbed)
	setStatus       bool
	onObjStruct     func(e *tests.ObjEmbed)
	setObjStruct    bool
	onObjInterface  func(e *tests.ObjEmbed)
	setObjInterface bool
}

func NewFactoryObjEmbed(e tests.ObjEmbed) *factoryObjEmbed {
	return &factoryObjEmbed{
		entity:         &e,
		seq:            func(e *tests.ObjEmbed) {},
		seqInt:         func(e *tests.ObjEmbed) {},
		seqInt64:       func(e *tests.ObjEmbed) {},
		onCreate:       func(ctx context.Context, e *tests.ObjEmbed) error { return nil },
		onStatus:       func(e *tests.ObjEmbed) {},
		onObjStruct:    func(e *tests.ObjEmbed) {},
		onObjInterface: func(e *tests.ObjEmbed) {},
	}
}

func (slf *factoryObjEmbed) Status(v tests.Status) *factoryObjEmbed {
	slf.entity.Status = v
	slf.setStatus = true
	return slf
}

func (slf *factoryObjEmbed) OnStatus(fn func(e *tests.ObjEmbed)) *factoryObjEmbed {
	slf.onStatus = fn
	return slf
}

func (slf *factoryObjEmbed) ObjStruct(v tests.ObjStruct) *factoryObjEmbed {
	slf.entity.ObjStruct = v
	slf.setObjStruct = true
	return slf
}

func (slf *factoryObjEmbed) OnObjStruct(fn func(e *tests.ObjEmbed)) *factoryObjEmbed {
	slf.onObjStruct = fn
	return slf
}

func (slf *factoryObjEmbed) ObjInterface(v tests.ObjInterface) *factoryObjEmbed {
	slf.entity.ObjInterface = v
	slf.setObjInterface = true
	return slf
}

func (slf *factoryObjEmbed) OnObjInterface(fn func(e *tests.ObjEmbed)) *factoryObjEmbed {
	slf.onObjInterface = fn
	return slf
}

func (slf *factoryObjEmbed) Seq(fn func(e *tests.ObjEmbed)) *factoryObjEmbed {
	slf.seq = fn
	return slf
}

func (slf *factoryObjEmbed) SeqInt(fn func(e *tests.ObjEmbed, n int)) *factoryObjEmbed {
	var seq int32
	slf.seqInt = func(e *tests.ObjEmbed) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryObjEmbed) SeqInt64(fn func(e *tests.ObjEmbed, n int64)) *factoryObjEmbed {
	var seq int64
	slf.seqInt64 = func(e *tests.ObjEmbed) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryObjEmbed) OnCreate(fn func(ctx context.Context, e *tests.ObjEmbed) error) *factoryObjEmbed {
	slf.onCreate = fn
	return slf
}

func (slf *factoryObjEmbed) MustBuild() tests.ObjEmbed {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryObjEmbed) MustBuildCtx(ctx context.Context) tests.ObjEmbed {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setStatus {
		slf.onStatus(slf.entity)
	}

	if !slf.setObjStruct {
		slf.onObjStruct(slf.entity)
	}

	if !slf.setObjInterface {
		slf.onObjInterface(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
