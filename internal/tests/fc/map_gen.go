// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	fmt "fmt"
	tests "github.com/metalfm/factory/internal/tests"
	ast "go/ast"
	http "net/http"
	atomic "sync/atomic"
	time "time"
	time1 "time"
)

type factoryMap struct {
	entity   *tests.Map
	seq      func(e *tests.Map)
	seqInt   func(e *tests.Map)
	seqInt64 func(e *tests.Map)
	onCreate func(ctx context.Context, e *tests.Map) error
	onMap0   func(e *tests.Map)
	setMap0  bool
	onMap1   func(e *tests.Map)
	setMap1  bool
	onMap2   func(e *tests.Map)
	setMap2  bool
	onMap3   func(e *tests.Map)
	setMap3  bool
	onMap4   func(e *tests.Map)
	setMap4  bool
	onMap5   func(e *tests.Map)
	setMap5  bool
	onMap6   func(e *tests.Map)
	setMap6  bool
	onMap7   func(e *tests.Map)
	setMap7  bool
	onMap8   func(e *tests.Map)
	setMap8  bool
	onMap9   func(e *tests.Map)
	setMap9  bool
	onMap10  func(e *tests.Map)
	setMap10 bool
	onMap11  func(e *tests.Map)
	setMap11 bool
	onMap12  func(e *tests.Map)
	setMap12 bool
}

func NewFactoryMap(e tests.Map) *factoryMap {
	return &factoryMap{
		entity:   &e,
		seq:      func(e *tests.Map) {},
		seqInt:   func(e *tests.Map) {},
		seqInt64: func(e *tests.Map) {},
		onCreate: func(ctx context.Context, e *tests.Map) error { return nil },
		onMap0:   func(e *tests.Map) {},
		onMap1:   func(e *tests.Map) {},
		onMap2:   func(e *tests.Map) {},
		onMap3:   func(e *tests.Map) {},
		onMap4:   func(e *tests.Map) {},
		onMap5:   func(e *tests.Map) {},
		onMap6:   func(e *tests.Map) {},
		onMap7:   func(e *tests.Map) {},
		onMap8:   func(e *tests.Map) {},
		onMap9:   func(e *tests.Map) {},
		onMap10:  func(e *tests.Map) {},
		onMap11:  func(e *tests.Map) {},
		onMap12:  func(e *tests.Map) {},
	}
}

func (slf *factoryMap) Map0(v map[string]string) *factoryMap {
	slf.entity.Map0 = v
	slf.setMap0 = true
	return slf
}

func (slf *factoryMap) OnMap0(fn func(e *tests.Map)) *factoryMap {
	slf.onMap0 = fn
	return slf
}

func (slf *factoryMap) Map1(v map[string]*string) *factoryMap {
	slf.entity.Map1 = v
	slf.setMap1 = true
	return slf
}

func (slf *factoryMap) OnMap1(fn func(e *tests.Map)) *factoryMap {
	slf.onMap1 = fn
	return slf
}

func (slf *factoryMap) Map2(v map[*string]string) *factoryMap {
	slf.entity.Map2 = v
	slf.setMap2 = true
	return slf
}

func (slf *factoryMap) OnMap2(fn func(e *tests.Map)) *factoryMap {
	slf.onMap2 = fn
	return slf
}

func (slf *factoryMap) Map3(v map[*string]*string) *factoryMap {
	slf.entity.Map3 = v
	slf.setMap3 = true
	return slf
}

func (slf *factoryMap) OnMap3(fn func(e *tests.Map)) *factoryMap {
	slf.onMap3 = fn
	return slf
}

func (slf *factoryMap) Map4(v map[*any]*any) *factoryMap {
	slf.entity.Map4 = v
	slf.setMap4 = true
	return slf
}

func (slf *factoryMap) OnMap4(fn func(e *tests.Map)) *factoryMap {
	slf.onMap4 = fn
	return slf
}

func (slf *factoryMap) Map5(v **map[**string]**any) *factoryMap {
	slf.entity.Map5 = v
	slf.setMap5 = true
	return slf
}

func (slf *factoryMap) OnMap5(fn func(e *tests.Map)) *factoryMap {
	slf.onMap5 = fn
	return slf
}

func (slf *factoryMap) Map6(v map[interface{}]interface{}) *factoryMap {
	slf.entity.Map6 = v
	slf.setMap6 = true
	return slf
}

func (slf *factoryMap) OnMap6(fn func(e *tests.Map)) *factoryMap {
	slf.onMap6 = fn
	return slf
}

func (slf *factoryMap) Map7(v map[time.Time]time1.Time) *factoryMap {
	slf.entity.Map7 = v
	slf.setMap7 = true
	return slf
}

func (slf *factoryMap) OnMap7(fn func(e *tests.Map)) *factoryMap {
	slf.onMap7 = fn
	return slf
}

func (slf *factoryMap) Map8(v map[**time.Time]**time1.Time) *factoryMap {
	slf.entity.Map8 = v
	slf.setMap8 = true
	return slf
}

func (slf *factoryMap) OnMap8(fn func(e *tests.Map)) *factoryMap {
	slf.onMap8 = fn
	return slf
}

func (slf *factoryMap) Map9(v **map[**time.Time]**time1.Time) *factoryMap {
	slf.entity.Map9 = v
	slf.setMap9 = true
	return slf
}

func (slf *factoryMap) OnMap9(fn func(e *tests.Map)) *factoryMap {
	slf.onMap9 = fn
	return slf
}

func (slf *factoryMap) Map10(v map[ast.ObjKind]http.HandlerFunc) *factoryMap {
	slf.entity.Map10 = v
	slf.setMap10 = true
	return slf
}

func (slf *factoryMap) OnMap10(fn func(e *tests.Map)) *factoryMap {
	slf.onMap10 = fn
	return slf
}

func (slf *factoryMap) Map11(v **map[*ast.ObjKind]*http.HandlerFunc) *factoryMap {
	slf.entity.Map11 = v
	slf.setMap11 = true
	return slf
}

func (slf *factoryMap) OnMap11(fn func(e *tests.Map)) *factoryMap {
	slf.onMap11 = fn
	return slf
}

func (slf *factoryMap) Map12(v map[[2]int][2]any) *factoryMap {
	slf.entity.Map12 = v
	slf.setMap12 = true
	return slf
}

func (slf *factoryMap) OnMap12(fn func(e *tests.Map)) *factoryMap {
	slf.onMap12 = fn
	return slf
}

func (slf *factoryMap) Seq(fn func(e *tests.Map)) *factoryMap {
	slf.seq = fn
	return slf
}

func (slf *factoryMap) SeqInt(fn func(e *tests.Map, n int)) *factoryMap {
	var seq int32
	slf.seqInt = func(e *tests.Map) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryMap) SeqInt64(fn func(e *tests.Map, n int64)) *factoryMap {
	var seq int64
	slf.seqInt64 = func(e *tests.Map) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryMap) OnCreate(fn func(ctx context.Context, e *tests.Map) error) *factoryMap {
	slf.onCreate = fn
	return slf
}

func (slf *factoryMap) MustBuild() tests.Map {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryMap) MustBuildCtx(ctx context.Context) tests.Map {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setMap0 {
		slf.onMap0(slf.entity)
	}

	if !slf.setMap1 {
		slf.onMap1(slf.entity)
	}

	if !slf.setMap2 {
		slf.onMap2(slf.entity)
	}

	if !slf.setMap3 {
		slf.onMap3(slf.entity)
	}

	if !slf.setMap4 {
		slf.onMap4(slf.entity)
	}

	if !slf.setMap5 {
		slf.onMap5(slf.entity)
	}

	if !slf.setMap6 {
		slf.onMap6(slf.entity)
	}

	if !slf.setMap7 {
		slf.onMap7(slf.entity)
	}

	if !slf.setMap8 {
		slf.onMap8(slf.entity)
	}

	if !slf.setMap9 {
		slf.onMap9(slf.entity)
	}

	if !slf.setMap10 {
		slf.onMap10(slf.entity)
	}

	if !slf.setMap11 {
		slf.onMap11(slf.entity)
	}

	if !slf.setMap12 {
		slf.onMap12(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
