// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	fmt "fmt"
	tests "github.com/metalfm/factory/internal/tests"
	entity "github.com/metalfm/factory/internal/tests/entity"
	atomic "sync/atomic"
	time "time"
	time1 "time"
)

type factoryFunc struct {
	entity   *tests.Func
	seq      func(e *tests.Func)
	seqInt   func(e *tests.Func)
	seqInt64 func(e *tests.Func)
	onCreate func(ctx context.Context, e *tests.Func) error
	onF0     func(e *tests.Func)
	setF0    bool
	onF1     func(e *tests.Func)
	setF1    bool
	onF2     func(e *tests.Func)
	setF2    bool
	onF3     func(e *tests.Func)
	setF3    bool
	onF4     func(e *tests.Func)
	setF4    bool
	onF5     func(e *tests.Func)
	setF5    bool
	onF6     func(e *tests.Func)
	setF6    bool
	onF7     func(e *tests.Func)
	setF7    bool
	onF8     func(e *tests.Func)
	setF8    bool
	onF9     func(e *tests.Func)
	setF9    bool
}

func NewFactoryFunc(e tests.Func) *factoryFunc {
	return &factoryFunc{
		entity:   &e,
		seq:      func(e *tests.Func) {},
		seqInt:   func(e *tests.Func) {},
		seqInt64: func(e *tests.Func) {},
		onCreate: func(ctx context.Context, e *tests.Func) error { return nil },
		onF0:     func(e *tests.Func) {},
		onF1:     func(e *tests.Func) {},
		onF2:     func(e *tests.Func) {},
		onF3:     func(e *tests.Func) {},
		onF4:     func(e *tests.Func) {},
		onF5:     func(e *tests.Func) {},
		onF6:     func(e *tests.Func) {},
		onF7:     func(e *tests.Func) {},
		onF8:     func(e *tests.Func) {},
		onF9:     func(e *tests.Func) {},
	}
}

func (slf *factoryFunc) F0(v func()) *factoryFunc {
	slf.entity.F0 = v
	slf.setF0 = true
	return slf
}

func (slf *factoryFunc) OnF0(fn func(e *tests.Func)) *factoryFunc {
	slf.onF0 = fn
	return slf
}

func (slf *factoryFunc) F1(v func(string, string) (int, int)) *factoryFunc {
	slf.entity.F1 = v
	slf.setF1 = true
	return slf
}

func (slf *factoryFunc) OnF1(fn func(e *tests.Func)) *factoryFunc {
	slf.onF1 = fn
	return slf
}

func (slf *factoryFunc) F2(v func(str1, str2 string) (k, v int, err error)) *factoryFunc {
	slf.entity.F2 = v
	slf.setF2 = true
	return slf
}

func (slf *factoryFunc) OnF2(fn func(e *tests.Func)) *factoryFunc {
	slf.onF2 = fn
	return slf
}

func (slf *factoryFunc) F3(v func(str1 string, str2 string) (k int, v int, err error)) *factoryFunc {
	slf.entity.F3 = v
	slf.setF3 = true
	return slf
}

func (slf *factoryFunc) OnF3(fn func(e *tests.Func)) *factoryFunc {
	slf.onF3 = fn
	return slf
}

func (slf *factoryFunc) F4(v func(*string, *string) (*int, *int)) *factoryFunc {
	slf.entity.F4 = v
	slf.setF4 = true
	return slf
}

func (slf *factoryFunc) OnF4(fn func(e *tests.Func)) *factoryFunc {
	slf.onF4 = fn
	return slf
}

func (slf *factoryFunc) F5(v func(str1, str2 *string) (k, v *int, err *error)) *factoryFunc {
	slf.entity.F5 = v
	slf.setF5 = true
	return slf
}

func (slf *factoryFunc) OnF5(fn func(e *tests.Func)) *factoryFunc {
	slf.onF5 = fn
	return slf
}

func (slf *factoryFunc) F6(v func(str1 *string, str2 *string) (k *int, v *int, err *error)) *factoryFunc {
	slf.entity.F6 = v
	slf.setF6 = true
	return slf
}

func (slf *factoryFunc) OnF6(fn func(e *tests.Func)) *factoryFunc {
	slf.onF6 = fn
	return slf
}

func (slf *factoryFunc) F7(v **func(**int) (**time.Time, **time1.Time)) *factoryFunc {
	slf.entity.F7 = v
	slf.setF7 = true
	return slf
}

func (slf *factoryFunc) OnF7(fn func(e *tests.Func)) *factoryFunc {
	slf.onF7 = fn
	return slf
}

func (slf *factoryFunc) F8(v **func(**int) (**time.Time, **time1.Time)) *factoryFunc {
	slf.entity.F8 = v
	slf.setF8 = true
	return slf
}

func (slf *factoryFunc) OnF8(fn func(e *tests.Func)) *factoryFunc {
	slf.onF8 = fn
	return slf
}

func (slf *factoryFunc) F9(v **func(a, b map[string]func(a, b time.Time, u **entity.User, c map[any]any)) [5]**int) *factoryFunc {
	slf.entity.F9 = v
	slf.setF9 = true
	return slf
}

func (slf *factoryFunc) OnF9(fn func(e *tests.Func)) *factoryFunc {
	slf.onF9 = fn
	return slf
}

func (slf *factoryFunc) Seq(fn func(e *tests.Func)) *factoryFunc {
	slf.seq = fn
	return slf
}

func (slf *factoryFunc) SeqInt(fn func(e *tests.Func, n int)) *factoryFunc {
	var seq int32
	slf.seqInt = func(e *tests.Func) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryFunc) SeqInt64(fn func(e *tests.Func, n int64)) *factoryFunc {
	var seq int64
	slf.seqInt64 = func(e *tests.Func) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryFunc) OnCreate(fn func(ctx context.Context, e *tests.Func) error) *factoryFunc {
	slf.onCreate = fn
	return slf
}

func (slf *factoryFunc) MustBuild() tests.Func {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryFunc) MustBuildCtx(ctx context.Context) tests.Func {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setF0 {
		slf.onF0(slf.entity)
	}

	if !slf.setF1 {
		slf.onF1(slf.entity)
	}

	if !slf.setF2 {
		slf.onF2(slf.entity)
	}

	if !slf.setF3 {
		slf.onF3(slf.entity)
	}

	if !slf.setF4 {
		slf.onF4(slf.entity)
	}

	if !slf.setF5 {
		slf.onF5(slf.entity)
	}

	if !slf.setF6 {
		slf.onF6(slf.entity)
	}

	if !slf.setF7 {
		slf.onF7(slf.entity)
	}

	if !slf.setF8 {
		slf.onF8(slf.entity)
	}

	if !slf.setF9 {
		slf.onF9(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
