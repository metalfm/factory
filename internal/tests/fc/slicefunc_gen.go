// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	fmt "fmt"
	tests "github.com/metalfm/factory/internal/tests"
	atomic "sync/atomic"
)

type factorySliceFunc struct {
	entity    *tests.SliceFunc
	seq       func(e *tests.SliceFunc)
	seqInt    func(e *tests.SliceFunc)
	seqInt64  func(e *tests.SliceFunc)
	onCreate  func(ctx context.Context, e *tests.SliceFunc) error
	onSlice0  func(e *tests.SliceFunc)
	setSlice0 bool
	onSlice1  func(e *tests.SliceFunc)
	setSlice1 bool
	onSlice2  func(e *tests.SliceFunc)
	setSlice2 bool
}

func NewFactorySliceFunc(e tests.SliceFunc) *factorySliceFunc {
	return &factorySliceFunc{
		entity:   &e,
		seq:      func(e *tests.SliceFunc) {},
		seqInt:   func(e *tests.SliceFunc) {},
		seqInt64: func(e *tests.SliceFunc) {},
		onCreate: func(ctx context.Context, e *tests.SliceFunc) error { return nil },
		onSlice0: func(e *tests.SliceFunc) {},
		onSlice1: func(e *tests.SliceFunc) {},
		onSlice2: func(e *tests.SliceFunc) {},
	}
}

func (slf *factorySliceFunc) Slice0(v **[]**func(a, b string) **any) *factorySliceFunc {
	slf.entity.Slice0 = v
	slf.setSlice0 = true
	return slf
}

func (slf *factorySliceFunc) OnSlice0(fn func(e *tests.SliceFunc)) *factorySliceFunc {
	slf.onSlice0 = fn
	return slf
}

func (slf *factorySliceFunc) Slice1(v **[]**func(string, string) []func() (**error, **any)) *factorySliceFunc {
	slf.entity.Slice1 = v
	slf.setSlice1 = true
	return slf
}

func (slf *factorySliceFunc) OnSlice1(fn func(e *tests.SliceFunc)) *factorySliceFunc {
	slf.onSlice1 = fn
	return slf
}

func (slf *factorySliceFunc) Slice2(v **[]func(a, b **[]**[]func(any) (c, d string)) **[]**[]**any) *factorySliceFunc {
	slf.entity.Slice2 = v
	slf.setSlice2 = true
	return slf
}

func (slf *factorySliceFunc) OnSlice2(fn func(e *tests.SliceFunc)) *factorySliceFunc {
	slf.onSlice2 = fn
	return slf
}

func (slf *factorySliceFunc) Seq(fn func(e *tests.SliceFunc)) *factorySliceFunc {
	slf.seq = fn
	return slf
}

func (slf *factorySliceFunc) SeqInt(fn func(e *tests.SliceFunc, n int)) *factorySliceFunc {
	var seq int32
	slf.seqInt = func(e *tests.SliceFunc) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factorySliceFunc) SeqInt64(fn func(e *tests.SliceFunc, n int64)) *factorySliceFunc {
	var seq int64
	slf.seqInt64 = func(e *tests.SliceFunc) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factorySliceFunc) OnCreate(fn func(ctx context.Context, e *tests.SliceFunc) error) *factorySliceFunc {
	slf.onCreate = fn
	return slf
}

func (slf *factorySliceFunc) MustBuild() tests.SliceFunc {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factorySliceFunc) MustBuildCtx(ctx context.Context) tests.SliceFunc {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setSlice0 {
		slf.onSlice0(slf.entity)
	}

	if !slf.setSlice1 {
		slf.onSlice1(slf.entity)
	}

	if !slf.setSlice2 {
		slf.onSlice2(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
