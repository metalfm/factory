// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	fmt "fmt"
	tests "github.com/metalfm/factory/internal/tests"
	atomic "sync/atomic"
)

type factoryTypesEmpty struct {
	entity   *tests.TypesEmpty
	seq      func(e *tests.TypesEmpty)
	seqInt   func(e *tests.TypesEmpty)
	seqInt64 func(e *tests.TypesEmpty)
	onCreate func(ctx context.Context, e *tests.TypesEmpty) error
}

func NewFactoryTypesEmpty(e tests.TypesEmpty) *factoryTypesEmpty {
	return &factoryTypesEmpty{
		entity:   &e,
		seq:      func(e *tests.TypesEmpty) {},
		seqInt:   func(e *tests.TypesEmpty) {},
		seqInt64: func(e *tests.TypesEmpty) {},
		onCreate: func(ctx context.Context, e *tests.TypesEmpty) error { return nil },
	}
}

func (slf *factoryTypesEmpty) Seq(fn func(e *tests.TypesEmpty)) *factoryTypesEmpty {
	slf.seq = fn
	return slf
}

func (slf *factoryTypesEmpty) SeqInt(fn func(e *tests.TypesEmpty, n int)) *factoryTypesEmpty {
	var seq int32
	slf.seqInt = func(e *tests.TypesEmpty) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryTypesEmpty) SeqInt64(fn func(e *tests.TypesEmpty, n int64)) *factoryTypesEmpty {
	var seq int64
	slf.seqInt64 = func(e *tests.TypesEmpty) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryTypesEmpty) OnCreate(fn func(ctx context.Context, e *tests.TypesEmpty) error) *factoryTypesEmpty {
	slf.onCreate = fn
	return slf
}

func (slf *factoryTypesEmpty) MustBuild() tests.TypesEmpty {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryTypesEmpty) MustBuildCtx(ctx context.Context) tests.TypesEmpty {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
