// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
	time "time"
	time1 "time"
)

type factoryArray struct {
	entity     *tests.Array
	seq        func(e *tests.Array)
	seqInt     func(e *tests.Array)
	seqInt64   func(e *tests.Array)
	onCreate   func(ctx context.Context, e *tests.Array) error
	onArray0   func(e *tests.Array)
	setArray0  bool
	onArray1   func(e *tests.Array)
	setArray1  bool
	onArray2   func(e *tests.Array)
	setArray2  bool
	onArray3   func(e *tests.Array)
	setArray3  bool
	onArray5   func(e *tests.Array)
	setArray5  bool
	onArray6   func(e *tests.Array)
	setArray6  bool
	onArray7   func(e *tests.Array)
	setArray7  bool
	onArray8   func(e *tests.Array)
	setArray8  bool
	onArray9   func(e *tests.Array)
	setArray9  bool
	onArray10  func(e *tests.Array)
	setArray10 bool
	onArray11  func(e *tests.Array)
	setArray11 bool
	onArray12  func(e *tests.Array)
	setArray12 bool
	onArray13  func(e *tests.Array)
	setArray13 bool
	onArray14  func(e *tests.Array)
	setArray14 bool
}

func NewFactoryArray(e tests.Array) *factoryArray {
	return &factoryArray{
		entity:    &e,
		seq:       func(e *tests.Array) {},
		seqInt:    func(e *tests.Array) {},
		seqInt64:  func(e *tests.Array) {},
		onCreate:  func(ctx context.Context, e *tests.Array) error { return nil },
		onArray0:  func(e *tests.Array) {},
		onArray1:  func(e *tests.Array) {},
		onArray2:  func(e *tests.Array) {},
		onArray3:  func(e *tests.Array) {},
		onArray5:  func(e *tests.Array) {},
		onArray6:  func(e *tests.Array) {},
		onArray7:  func(e *tests.Array) {},
		onArray8:  func(e *tests.Array) {},
		onArray9:  func(e *tests.Array) {},
		onArray10: func(e *tests.Array) {},
		onArray11: func(e *tests.Array) {},
		onArray12: func(e *tests.Array) {},
		onArray13: func(e *tests.Array) {},
		onArray14: func(e *tests.Array) {},
	}
}

func (slf *factoryArray) Array0(v [8.0]int) *factoryArray {
	slf.entity.Array0 = v
	slf.setArray0 = true
	return slf
}

func (slf *factoryArray) OnArray0(fn func(e *tests.Array)) *factoryArray {
	slf.onArray0 = fn
	return slf
}

func (slf *factoryArray) Array1(v [0x7f]uint) *factoryArray {
	slf.entity.Array1 = v
	slf.setArray1 = true
	return slf
}

func (slf *factoryArray) OnArray1(fn func(e *tests.Array)) *factoryArray {
	slf.onArray1 = fn
	return slf
}

func (slf *factoryArray) Array2(v ['a']string) *factoryArray {
	slf.entity.Array2 = v
	slf.setArray2 = true
	return slf
}

func (slf *factoryArray) OnArray2(fn func(e *tests.Array)) *factoryArray {
	slf.onArray2 = fn
	return slf
}

func (slf *factoryArray) Array3(v ['\x7f']bool) *factoryArray {
	slf.entity.Array3 = v
	slf.setArray3 = true
	return slf
}

func (slf *factoryArray) OnArray3(fn func(e *tests.Array)) *factoryArray {
	slf.onArray3 = fn
	return slf
}

func (slf *factoryArray) Array5(v [1]any) *factoryArray {
	slf.entity.Array5 = v
	slf.setArray5 = true
	return slf
}

func (slf *factoryArray) OnArray5(fn func(e *tests.Array)) *factoryArray {
	slf.onArray5 = fn
	return slf
}

func (slf *factoryArray) Array6(v [8.0]*int) *factoryArray {
	slf.entity.Array6 = v
	slf.setArray6 = true
	return slf
}

func (slf *factoryArray) OnArray6(fn func(e *tests.Array)) *factoryArray {
	slf.onArray6 = fn
	return slf
}

func (slf *factoryArray) Array7(v [0x7f]*uint) *factoryArray {
	slf.entity.Array7 = v
	slf.setArray7 = true
	return slf
}

func (slf *factoryArray) OnArray7(fn func(e *tests.Array)) *factoryArray {
	slf.onArray7 = fn
	return slf
}

func (slf *factoryArray) Array8(v ['a']*string) *factoryArray {
	slf.entity.Array8 = v
	slf.setArray8 = true
	return slf
}

func (slf *factoryArray) OnArray8(fn func(e *tests.Array)) *factoryArray {
	slf.onArray8 = fn
	return slf
}

func (slf *factoryArray) Array9(v ['\x7f']*bool) *factoryArray {
	slf.entity.Array9 = v
	slf.setArray9 = true
	return slf
}

func (slf *factoryArray) OnArray9(fn func(e *tests.Array)) *factoryArray {
	slf.onArray9 = fn
	return slf
}

func (slf *factoryArray) Array10(v [1]*any) *factoryArray {
	slf.entity.Array10 = v
	slf.setArray10 = true
	return slf
}

func (slf *factoryArray) OnArray10(fn func(e *tests.Array)) *factoryArray {
	slf.onArray10 = fn
	return slf
}

func (slf *factoryArray) Array11(v [1][2]any) *factoryArray {
	slf.entity.Array11 = v
	slf.setArray11 = true
	return slf
}

func (slf *factoryArray) OnArray11(fn func(e *tests.Array)) *factoryArray {
	slf.onArray11 = fn
	return slf
}

func (slf *factoryArray) Array12(v [1][2]map[string]string) *factoryArray {
	slf.entity.Array12 = v
	slf.setArray12 = true
	return slf
}

func (slf *factoryArray) OnArray12(fn func(e *tests.Array)) *factoryArray {
	slf.onArray12 = fn
	return slf
}

func (slf *factoryArray) Array13(v [1][2]*map[**string]**string) *factoryArray {
	slf.entity.Array13 = v
	slf.setArray13 = true
	return slf
}

func (slf *factoryArray) OnArray13(fn func(e *tests.Array)) *factoryArray {
	slf.onArray13 = fn
	return slf
}

func (slf *factoryArray) Array14(v [1][2]*map[**time1.Time]**time.Time) *factoryArray {
	slf.entity.Array14 = v
	slf.setArray14 = true
	return slf
}

func (slf *factoryArray) OnArray14(fn func(e *tests.Array)) *factoryArray {
	slf.onArray14 = fn
	return slf
}

func (slf *factoryArray) Seq(fn func(e *tests.Array)) *factoryArray {
	slf.seq = fn
	return slf
}

func (slf *factoryArray) SeqInt(fn func(e *tests.Array, n int)) *factoryArray {
	var seq int32
	slf.seqInt = func(e *tests.Array) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryArray) SeqInt64(fn func(e *tests.Array, n int64)) *factoryArray {
	var seq int64
	slf.seqInt64 = func(e *tests.Array) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryArray) OnCreate(fn func(ctx context.Context, e *tests.Array) error) *factoryArray {
	slf.onCreate = fn
	return slf
}

func (slf *factoryArray) MustBuild() tests.Array {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryArray) MustBuildCtx(ctx context.Context) tests.Array {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setArray0 {
		slf.onArray0(slf.entity)
	}

	if !slf.setArray1 {
		slf.onArray1(slf.entity)
	}

	if !slf.setArray2 {
		slf.onArray2(slf.entity)
	}

	if !slf.setArray3 {
		slf.onArray3(slf.entity)
	}

	if !slf.setArray5 {
		slf.onArray5(slf.entity)
	}

	if !slf.setArray6 {
		slf.onArray6(slf.entity)
	}

	if !slf.setArray7 {
		slf.onArray7(slf.entity)
	}

	if !slf.setArray8 {
		slf.onArray8(slf.entity)
	}

	if !slf.setArray9 {
		slf.onArray9(slf.entity)
	}

	if !slf.setArray10 {
		slf.onArray10(slf.entity)
	}

	if !slf.setArray11 {
		slf.onArray11(slf.entity)
	}

	if !slf.setArray12 {
		slf.onArray12(slf.entity)
	}

	if !slf.setArray13 {
		slf.onArray13(slf.entity)
	}

	if !slf.setArray14 {
		slf.onArray14(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
