// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
)

type factoryTypes struct {
	entity        *tests.Types
	seq           func(e *tests.Types)
	seqInt        func(e *tests.Types)
	seqInt64      func(e *tests.Types)
	onCreate      func(ctx context.Context, e *tests.Types) error
	onAny         func(e *tests.Types)
	setAny        bool
	onBool        func(e *tests.Types)
	setBool       bool
	onString      func(e *tests.Types)
	setString     bool
	onInt         func(e *tests.Types)
	setInt        bool
	onInt8        func(e *tests.Types)
	setInt8       bool
	onInt16       func(e *tests.Types)
	setInt16      bool
	onInt32       func(e *tests.Types)
	setInt32      bool
	onInt64       func(e *tests.Types)
	setInt64      bool
	onUint        func(e *tests.Types)
	setUint       bool
	onUint8       func(e *tests.Types)
	setUint8      bool
	onUint16      func(e *tests.Types)
	setUint16     bool
	onUint32      func(e *tests.Types)
	setUint32     bool
	onUint64      func(e *tests.Types)
	setUint64     bool
	onUintptr     func(e *tests.Types)
	setUintptr    bool
	onByte        func(e *tests.Types)
	setByte       bool
	onRune        func(e *tests.Types)
	setRune       bool
	onFloat32     func(e *tests.Types)
	setFloat32    bool
	onFloat64     func(e *tests.Types)
	setFloat64    bool
	onComplex64   func(e *tests.Types)
	setComplex64  bool
	onComplex128  func(e *tests.Types)
	setComplex128 bool
	onErr         func(e *tests.Types)
	setErr        bool
	onStr0        func(e *tests.Types)
	setStr0       bool
	onStr2        func(e *tests.Types)
	setStr2       bool
}

func NewFactoryTypes(e tests.Types) *factoryTypes {
	return &factoryTypes{
		entity:       &e,
		seq:          func(e *tests.Types) {},
		seqInt:       func(e *tests.Types) {},
		seqInt64:     func(e *tests.Types) {},
		onCreate:     func(ctx context.Context, e *tests.Types) error { return nil },
		onAny:        func(e *tests.Types) {},
		onBool:       func(e *tests.Types) {},
		onString:     func(e *tests.Types) {},
		onInt:        func(e *tests.Types) {},
		onInt8:       func(e *tests.Types) {},
		onInt16:      func(e *tests.Types) {},
		onInt32:      func(e *tests.Types) {},
		onInt64:      func(e *tests.Types) {},
		onUint:       func(e *tests.Types) {},
		onUint8:      func(e *tests.Types) {},
		onUint16:     func(e *tests.Types) {},
		onUint32:     func(e *tests.Types) {},
		onUint64:     func(e *tests.Types) {},
		onUintptr:    func(e *tests.Types) {},
		onByte:       func(e *tests.Types) {},
		onRune:       func(e *tests.Types) {},
		onFloat32:    func(e *tests.Types) {},
		onFloat64:    func(e *tests.Types) {},
		onComplex64:  func(e *tests.Types) {},
		onComplex128: func(e *tests.Types) {},
		onErr:        func(e *tests.Types) {},
		onStr0:       func(e *tests.Types) {},
		onStr2:       func(e *tests.Types) {},
	}
}

func (slf *factoryTypes) Any(v any) *factoryTypes {
	slf.entity.Any = v
	slf.setAny = true
	return slf
}

func (slf *factoryTypes) OnAny(fn func(e *tests.Types)) *factoryTypes {
	slf.onAny = fn
	return slf
}

func (slf *factoryTypes) Bool(v bool) *factoryTypes {
	slf.entity.Bool = v
	slf.setBool = true
	return slf
}

func (slf *factoryTypes) OnBool(fn func(e *tests.Types)) *factoryTypes {
	slf.onBool = fn
	return slf
}

func (slf *factoryTypes) String(v string) *factoryTypes {
	slf.entity.String = v
	slf.setString = true
	return slf
}

func (slf *factoryTypes) OnString(fn func(e *tests.Types)) *factoryTypes {
	slf.onString = fn
	return slf
}

func (slf *factoryTypes) Int(v int) *factoryTypes {
	slf.entity.Int = v
	slf.setInt = true
	return slf
}

func (slf *factoryTypes) OnInt(fn func(e *tests.Types)) *factoryTypes {
	slf.onInt = fn
	return slf
}

func (slf *factoryTypes) Int8(v int8) *factoryTypes {
	slf.entity.Int8 = v
	slf.setInt8 = true
	return slf
}

func (slf *factoryTypes) OnInt8(fn func(e *tests.Types)) *factoryTypes {
	slf.onInt8 = fn
	return slf
}

func (slf *factoryTypes) Int16(v int16) *factoryTypes {
	slf.entity.Int16 = v
	slf.setInt16 = true
	return slf
}

func (slf *factoryTypes) OnInt16(fn func(e *tests.Types)) *factoryTypes {
	slf.onInt16 = fn
	return slf
}

func (slf *factoryTypes) Int32(v int32) *factoryTypes {
	slf.entity.Int32 = v
	slf.setInt32 = true
	return slf
}

func (slf *factoryTypes) OnInt32(fn func(e *tests.Types)) *factoryTypes {
	slf.onInt32 = fn
	return slf
}

func (slf *factoryTypes) Int64(v int64) *factoryTypes {
	slf.entity.Int64 = v
	slf.setInt64 = true
	return slf
}

func (slf *factoryTypes) OnInt64(fn func(e *tests.Types)) *factoryTypes {
	slf.onInt64 = fn
	return slf
}

func (slf *factoryTypes) Uint(v uint) *factoryTypes {
	slf.entity.Uint = v
	slf.setUint = true
	return slf
}

func (slf *factoryTypes) OnUint(fn func(e *tests.Types)) *factoryTypes {
	slf.onUint = fn
	return slf
}

func (slf *factoryTypes) Uint8(v uint8) *factoryTypes {
	slf.entity.Uint8 = v
	slf.setUint8 = true
	return slf
}

func (slf *factoryTypes) OnUint8(fn func(e *tests.Types)) *factoryTypes {
	slf.onUint8 = fn
	return slf
}

func (slf *factoryTypes) Uint16(v uint16) *factoryTypes {
	slf.entity.Uint16 = v
	slf.setUint16 = true
	return slf
}

func (slf *factoryTypes) OnUint16(fn func(e *tests.Types)) *factoryTypes {
	slf.onUint16 = fn
	return slf
}

func (slf *factoryTypes) Uint32(v uint32) *factoryTypes {
	slf.entity.Uint32 = v
	slf.setUint32 = true
	return slf
}

func (slf *factoryTypes) OnUint32(fn func(e *tests.Types)) *factoryTypes {
	slf.onUint32 = fn
	return slf
}

func (slf *factoryTypes) Uint64(v uint64) *factoryTypes {
	slf.entity.Uint64 = v
	slf.setUint64 = true
	return slf
}

func (slf *factoryTypes) OnUint64(fn func(e *tests.Types)) *factoryTypes {
	slf.onUint64 = fn
	return slf
}

func (slf *factoryTypes) Uintptr(v uintptr) *factoryTypes {
	slf.entity.Uintptr = v
	slf.setUintptr = true
	return slf
}

func (slf *factoryTypes) OnUintptr(fn func(e *tests.Types)) *factoryTypes {
	slf.onUintptr = fn
	return slf
}

func (slf *factoryTypes) Byte(v byte) *factoryTypes {
	slf.entity.Byte = v
	slf.setByte = true
	return slf
}

func (slf *factoryTypes) OnByte(fn func(e *tests.Types)) *factoryTypes {
	slf.onByte = fn
	return slf
}

func (slf *factoryTypes) Rune(v rune) *factoryTypes {
	slf.entity.Rune = v
	slf.setRune = true
	return slf
}

func (slf *factoryTypes) OnRune(fn func(e *tests.Types)) *factoryTypes {
	slf.onRune = fn
	return slf
}

func (slf *factoryTypes) Float32(v float32) *factoryTypes {
	slf.entity.Float32 = v
	slf.setFloat32 = true
	return slf
}

func (slf *factoryTypes) OnFloat32(fn func(e *tests.Types)) *factoryTypes {
	slf.onFloat32 = fn
	return slf
}

func (slf *factoryTypes) Float64(v float64) *factoryTypes {
	slf.entity.Float64 = v
	slf.setFloat64 = true
	return slf
}

func (slf *factoryTypes) OnFloat64(fn func(e *tests.Types)) *factoryTypes {
	slf.onFloat64 = fn
	return slf
}

func (slf *factoryTypes) Complex64(v complex64) *factoryTypes {
	slf.entity.Complex64 = v
	slf.setComplex64 = true
	return slf
}

func (slf *factoryTypes) OnComplex64(fn func(e *tests.Types)) *factoryTypes {
	slf.onComplex64 = fn
	return slf
}

func (slf *factoryTypes) Complex128(v complex128) *factoryTypes {
	slf.entity.Complex128 = v
	slf.setComplex128 = true
	return slf
}

func (slf *factoryTypes) OnComplex128(fn func(e *tests.Types)) *factoryTypes {
	slf.onComplex128 = fn
	return slf
}

func (slf *factoryTypes) Err(v error) *factoryTypes {
	slf.entity.Err = v
	slf.setErr = true
	return slf
}

func (slf *factoryTypes) OnErr(fn func(e *tests.Types)) *factoryTypes {
	slf.onErr = fn
	return slf
}

func (slf *factoryTypes) Str0(v string) *factoryTypes {
	slf.entity.Str0 = v
	slf.setStr0 = true
	return slf
}

func (slf *factoryTypes) OnStr0(fn func(e *tests.Types)) *factoryTypes {
	slf.onStr0 = fn
	return slf
}

func (slf *factoryTypes) Str2(v string) *factoryTypes {
	slf.entity.Str2 = v
	slf.setStr2 = true
	return slf
}

func (slf *factoryTypes) OnStr2(fn func(e *tests.Types)) *factoryTypes {
	slf.onStr2 = fn
	return slf
}

func (slf *factoryTypes) Seq(fn func(e *tests.Types)) *factoryTypes {
	slf.seq = fn
	return slf
}

func (slf *factoryTypes) SeqInt(fn func(e *tests.Types, n int)) *factoryTypes {
	var seq int32
	slf.seqInt = func(e *tests.Types) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryTypes) SeqInt64(fn func(e *tests.Types, n int64)) *factoryTypes {
	var seq int64
	slf.seqInt64 = func(e *tests.Types) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryTypes) OnCreate(fn func(ctx context.Context, e *tests.Types) error) *factoryTypes {
	slf.onCreate = fn
	return slf
}

func (slf *factoryTypes) MustBuild() tests.Types {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryTypes) MustBuildCtx(ctx context.Context) tests.Types {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setAny {
		slf.onAny(slf.entity)
	}

	if !slf.setBool {
		slf.onBool(slf.entity)
	}

	if !slf.setString {
		slf.onString(slf.entity)
	}

	if !slf.setInt {
		slf.onInt(slf.entity)
	}

	if !slf.setInt8 {
		slf.onInt8(slf.entity)
	}

	if !slf.setInt16 {
		slf.onInt16(slf.entity)
	}

	if !slf.setInt32 {
		slf.onInt32(slf.entity)
	}

	if !slf.setInt64 {
		slf.onInt64(slf.entity)
	}

	if !slf.setUint {
		slf.onUint(slf.entity)
	}

	if !slf.setUint8 {
		slf.onUint8(slf.entity)
	}

	if !slf.setUint16 {
		slf.onUint16(slf.entity)
	}

	if !slf.setUint32 {
		slf.onUint32(slf.entity)
	}

	if !slf.setUint64 {
		slf.onUint64(slf.entity)
	}

	if !slf.setUintptr {
		slf.onUintptr(slf.entity)
	}

	if !slf.setByte {
		slf.onByte(slf.entity)
	}

	if !slf.setRune {
		slf.onRune(slf.entity)
	}

	if !slf.setFloat32 {
		slf.onFloat32(slf.entity)
	}

	if !slf.setFloat64 {
		slf.onFloat64(slf.entity)
	}

	if !slf.setComplex64 {
		slf.onComplex64(slf.entity)
	}

	if !slf.setComplex128 {
		slf.onComplex128(slf.entity)
	}

	if !slf.setErr {
		slf.onErr(slf.entity)
	}

	if !slf.setStr0 {
		slf.onStr0(slf.entity)
	}

	if !slf.setStr2 {
		slf.onStr2(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
