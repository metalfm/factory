// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
)

type factoryArrayObj struct {
	entity    *tests.ArrayObj
	seq       func(e *tests.ArrayObj)
	seqInt    func(e *tests.ArrayObj)
	seqInt64  func(e *tests.ArrayObj)
	onCreate  func(ctx context.Context, e *tests.ArrayObj) error
	onArray0  func(e *tests.ArrayObj)
	setArray0 bool
	onArray2  func(e *tests.ArrayObj)
	setArray2 bool
	onArray3  func(e *tests.ArrayObj)
	setArray3 bool
	onArray4  func(e *tests.ArrayObj)
	setArray4 bool
	onArray5  func(e *tests.ArrayObj)
	setArray5 bool
	onArray6  func(e *tests.ArrayObj)
	setArray6 bool
}

func NewFactoryArrayObj(e tests.ArrayObj) *factoryArrayObj {
	return &factoryArrayObj{
		entity:   &e,
		seq:      func(e *tests.ArrayObj) {},
		seqInt:   func(e *tests.ArrayObj) {},
		seqInt64: func(e *tests.ArrayObj) {},
		onCreate: func(ctx context.Context, e *tests.ArrayObj) error { return nil },
		onArray0: func(e *tests.ArrayObj) {},
		onArray2: func(e *tests.ArrayObj) {},
		onArray3: func(e *tests.ArrayObj) {},
		onArray4: func(e *tests.ArrayObj) {},
		onArray5: func(e *tests.ArrayObj) {},
		onArray6: func(e *tests.ArrayObj) {},
	}
}

func (slf *factoryArrayObj) Array0(v [5]tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array0 = v
	slf.setArray0 = true
	return slf
}

func (slf *factoryArrayObj) OnArray0(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray0 = fn
	return slf
}

func (slf *factoryArrayObj) Array2(v **[5]tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array2 = v
	slf.setArray2 = true
	return slf
}

func (slf *factoryArrayObj) OnArray2(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray2 = fn
	return slf
}

func (slf *factoryArrayObj) Array3(v [5]**tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array3 = v
	slf.setArray3 = true
	return slf
}

func (slf *factoryArrayObj) OnArray3(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray3 = fn
	return slf
}

func (slf *factoryArrayObj) Array4(v **[5]**tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array4 = v
	slf.setArray4 = true
	return slf
}

func (slf *factoryArrayObj) OnArray4(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray4 = fn
	return slf
}

func (slf *factoryArrayObj) Array5(v **[1][2]**tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array5 = v
	slf.setArray5 = true
	return slf
}

func (slf *factoryArrayObj) OnArray5(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray5 = fn
	return slf
}

func (slf *factoryArrayObj) Array6(v **[1][2][3]**tests.ArrayStruct) *factoryArrayObj {
	slf.entity.Array6 = v
	slf.setArray6 = true
	return slf
}

func (slf *factoryArrayObj) OnArray6(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.onArray6 = fn
	return slf
}

func (slf *factoryArrayObj) Seq(fn func(e *tests.ArrayObj)) *factoryArrayObj {
	slf.seq = fn
	return slf
}

func (slf *factoryArrayObj) SeqInt(fn func(e *tests.ArrayObj, n int)) *factoryArrayObj {
	var seq int32
	slf.seqInt = func(e *tests.ArrayObj) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryArrayObj) SeqInt64(fn func(e *tests.ArrayObj, n int64)) *factoryArrayObj {
	var seq int64
	slf.seqInt64 = func(e *tests.ArrayObj) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryArrayObj) OnCreate(fn func(ctx context.Context, e *tests.ArrayObj) error) *factoryArrayObj {
	slf.onCreate = fn
	return slf
}

func (slf *factoryArrayObj) MustBuild() tests.ArrayObj {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryArrayObj) MustBuildCtx(ctx context.Context) tests.ArrayObj {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setArray0 {
		slf.onArray0(slf.entity)
	}

	if !slf.setArray2 {
		slf.onArray2(slf.entity)
	}

	if !slf.setArray3 {
		slf.onArray3(slf.entity)
	}

	if !slf.setArray4 {
		slf.onArray4(slf.entity)
	}

	if !slf.setArray5 {
		slf.onArray5(slf.entity)
	}

	if !slf.setArray6 {
		slf.onArray6(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
