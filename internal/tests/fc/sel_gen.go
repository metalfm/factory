// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	entity "factory/internal/tests/entity"
	fmt "fmt"
	ast "go/ast"
	http "net/http"
	atomic "sync/atomic"
	time "time"
	time1 "time"
)

type factorySel struct {
	entity      *tests.Sel
	seq         func(e *tests.Sel)
	seqInt      func(e *tests.Sel)
	seqInt64    func(e *tests.Sel)
	onCreate    func(ctx context.Context, e *tests.Sel) error
	onTime0     func(e *tests.Sel)
	setTime0    bool
	onTime1     func(e *tests.Sel)
	setTime1    bool
	onTime2     func(e *tests.Sel)
	setTime2    bool
	onTime3     func(e *tests.Sel)
	setTime3    bool
	onKind0     func(e *tests.Sel)
	setKind0    bool
	onKind1     func(e *tests.Sel)
	setKind1    bool
	onHandler0  func(e *tests.Sel)
	setHandler0 bool
	onHandler1  func(e *tests.Sel)
	setHandler1 bool
	onUser0     func(e *tests.Sel)
	setUser0    bool
	onUser1     func(e *tests.Sel)
	setUser1    bool
	onUser2     func(e *tests.Sel)
	setUser2    bool
}

func NewFactorySel(e tests.Sel) *factorySel {
	return &factorySel{
		entity:     &e,
		seq:        func(e *tests.Sel) {},
		seqInt:     func(e *tests.Sel) {},
		seqInt64:   func(e *tests.Sel) {},
		onCreate:   func(ctx context.Context, e *tests.Sel) error { return nil },
		onTime0:    func(e *tests.Sel) {},
		onTime1:    func(e *tests.Sel) {},
		onTime2:    func(e *tests.Sel) {},
		onTime3:    func(e *tests.Sel) {},
		onKind0:    func(e *tests.Sel) {},
		onKind1:    func(e *tests.Sel) {},
		onHandler0: func(e *tests.Sel) {},
		onHandler1: func(e *tests.Sel) {},
		onUser0:    func(e *tests.Sel) {},
		onUser1:    func(e *tests.Sel) {},
		onUser2:    func(e *tests.Sel) {},
	}
}

func (slf *factorySel) Time0(v time.Time) *factorySel {
	slf.entity.Time0 = v
	slf.setTime0 = true
	return slf
}

func (slf *factorySel) OnTime0(fn func(e *tests.Sel)) *factorySel {
	slf.onTime0 = fn
	return slf
}

func (slf *factorySel) Time1(v time1.Time) *factorySel {
	slf.entity.Time1 = v
	slf.setTime1 = true
	return slf
}

func (slf *factorySel) OnTime1(fn func(e *tests.Sel)) *factorySel {
	slf.onTime1 = fn
	return slf
}

func (slf *factorySel) Time2(v *time.Time) *factorySel {
	slf.entity.Time2 = v
	slf.setTime2 = true
	return slf
}

func (slf *factorySel) OnTime2(fn func(e *tests.Sel)) *factorySel {
	slf.onTime2 = fn
	return slf
}

func (slf *factorySel) Time3(v *time1.Time) *factorySel {
	slf.entity.Time3 = v
	slf.setTime3 = true
	return slf
}

func (slf *factorySel) OnTime3(fn func(e *tests.Sel)) *factorySel {
	slf.onTime3 = fn
	return slf
}

func (slf *factorySel) Kind0(v ast.ObjKind) *factorySel {
	slf.entity.Kind0 = v
	slf.setKind0 = true
	return slf
}

func (slf *factorySel) OnKind0(fn func(e *tests.Sel)) *factorySel {
	slf.onKind0 = fn
	return slf
}

func (slf *factorySel) Kind1(v *ast.ObjKind) *factorySel {
	slf.entity.Kind1 = v
	slf.setKind1 = true
	return slf
}

func (slf *factorySel) OnKind1(fn func(e *tests.Sel)) *factorySel {
	slf.onKind1 = fn
	return slf
}

func (slf *factorySel) Handler0(v http.HandlerFunc) *factorySel {
	slf.entity.Handler0 = v
	slf.setHandler0 = true
	return slf
}

func (slf *factorySel) OnHandler0(fn func(e *tests.Sel)) *factorySel {
	slf.onHandler0 = fn
	return slf
}

func (slf *factorySel) Handler1(v *http.HandlerFunc) *factorySel {
	slf.entity.Handler1 = v
	slf.setHandler1 = true
	return slf
}

func (slf *factorySel) OnHandler1(fn func(e *tests.Sel)) *factorySel {
	slf.onHandler1 = fn
	return slf
}

func (slf *factorySel) User0(v entity.User) *factorySel {
	slf.entity.User0 = v
	slf.setUser0 = true
	return slf
}

func (slf *factorySel) OnUser0(fn func(e *tests.Sel)) *factorySel {
	slf.onUser0 = fn
	return slf
}

func (slf *factorySel) User1(v *entity.User) *factorySel {
	slf.entity.User1 = v
	slf.setUser1 = true
	return slf
}

func (slf *factorySel) OnUser1(fn func(e *tests.Sel)) *factorySel {
	slf.onUser1 = fn
	return slf
}

func (slf *factorySel) User2(v **entity.User) *factorySel {
	slf.entity.User2 = v
	slf.setUser2 = true
	return slf
}

func (slf *factorySel) OnUser2(fn func(e *tests.Sel)) *factorySel {
	slf.onUser2 = fn
	return slf
}

func (slf *factorySel) Seq(fn func(e *tests.Sel)) *factorySel {
	slf.seq = fn
	return slf
}

func (slf *factorySel) SeqInt(fn func(e *tests.Sel, n int)) *factorySel {
	var seq int32
	slf.seqInt = func(e *tests.Sel) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factorySel) SeqInt64(fn func(e *tests.Sel, n int64)) *factorySel {
	var seq int64
	slf.seqInt64 = func(e *tests.Sel) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factorySel) OnCreate(fn func(ctx context.Context, e *tests.Sel) error) *factorySel {
	slf.onCreate = fn
	return slf
}

func (slf *factorySel) MustBuild() tests.Sel {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factorySel) MustBuildCtx(ctx context.Context) tests.Sel {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setTime0 {
		slf.onTime0(slf.entity)
	}

	if !slf.setTime1 {
		slf.onTime1(slf.entity)
	}

	if !slf.setTime2 {
		slf.onTime2(slf.entity)
	}

	if !slf.setTime3 {
		slf.onTime3(slf.entity)
	}

	if !slf.setKind0 {
		slf.onKind0(slf.entity)
	}

	if !slf.setKind1 {
		slf.onKind1(slf.entity)
	}

	if !slf.setHandler0 {
		slf.onHandler0(slf.entity)
	}

	if !slf.setHandler1 {
		slf.onHandler1(slf.entity)
	}

	if !slf.setUser0 {
		slf.onUser0(slf.entity)
	}

	if !slf.setUser1 {
		slf.onUser1(slf.entity)
	}

	if !slf.setUser2 {
		slf.onUser2(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
