// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
)

type factorySlice struct {
	entity    *tests.Slice
	seq       func(e *tests.Slice)
	seqInt    func(e *tests.Slice)
	seqInt64  func(e *tests.Slice)
	onCreate  func(ctx context.Context, e *tests.Slice) error
	onSlice0  func(e *tests.Slice)
	setSlice0 bool
	onSlice1  func(e *tests.Slice)
	setSlice1 bool
	onSlice2  func(e *tests.Slice)
	setSlice2 bool
	onSlice3  func(e *tests.Slice)
	setSlice3 bool
	onSlice4  func(e *tests.Slice)
	setSlice4 bool
	onSlice5  func(e *tests.Slice)
	setSlice5 bool
	onSlice6  func(e *tests.Slice)
	setSlice6 bool
	onSlice7  func(e *tests.Slice)
	setSlice7 bool
	onSlice8  func(e *tests.Slice)
	setSlice8 bool
}

func NewFactorySlice(e tests.Slice) *factorySlice {
	return &factorySlice{
		entity:   &e,
		seq:      func(e *tests.Slice) {},
		seqInt:   func(e *tests.Slice) {},
		seqInt64: func(e *tests.Slice) {},
		onCreate: func(ctx context.Context, e *tests.Slice) error { return nil },
		onSlice0: func(e *tests.Slice) {},
		onSlice1: func(e *tests.Slice) {},
		onSlice2: func(e *tests.Slice) {},
		onSlice3: func(e *tests.Slice) {},
		onSlice4: func(e *tests.Slice) {},
		onSlice5: func(e *tests.Slice) {},
		onSlice6: func(e *tests.Slice) {},
		onSlice7: func(e *tests.Slice) {},
		onSlice8: func(e *tests.Slice) {},
	}
}

func (slf *factorySlice) Slice0(v []string) *factorySlice {
	slf.entity.Slice0 = v
	slf.setSlice0 = true
	return slf
}

func (slf *factorySlice) OnSlice0(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice0 = fn
	return slf
}

func (slf *factorySlice) Slice1(v []int) *factorySlice {
	slf.entity.Slice1 = v
	slf.setSlice1 = true
	return slf
}

func (slf *factorySlice) OnSlice1(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice1 = fn
	return slf
}

func (slf *factorySlice) Slice2(v []bool) *factorySlice {
	slf.entity.Slice2 = v
	slf.setSlice2 = true
	return slf
}

func (slf *factorySlice) OnSlice2(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice2 = fn
	return slf
}

func (slf *factorySlice) Slice3(v []*string) *factorySlice {
	slf.entity.Slice3 = v
	slf.setSlice3 = true
	return slf
}

func (slf *factorySlice) OnSlice3(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice3 = fn
	return slf
}

func (slf *factorySlice) Slice4(v []*int) *factorySlice {
	slf.entity.Slice4 = v
	slf.setSlice4 = true
	return slf
}

func (slf *factorySlice) OnSlice4(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice4 = fn
	return slf
}

func (slf *factorySlice) Slice5(v []*bool) *factorySlice {
	slf.entity.Slice5 = v
	slf.setSlice5 = true
	return slf
}

func (slf *factorySlice) OnSlice5(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice5 = fn
	return slf
}

func (slf *factorySlice) Slice6(v [][]**int) *factorySlice {
	slf.entity.Slice6 = v
	slf.setSlice6 = true
	return slf
}

func (slf *factorySlice) OnSlice6(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice6 = fn
	return slf
}

func (slf *factorySlice) Slice7(v [][]int) *factorySlice {
	slf.entity.Slice7 = v
	slf.setSlice7 = true
	return slf
}

func (slf *factorySlice) OnSlice7(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice7 = fn
	return slf
}

func (slf *factorySlice) Slice8(v **[]**[]**any) *factorySlice {
	slf.entity.Slice8 = v
	slf.setSlice8 = true
	return slf
}

func (slf *factorySlice) OnSlice8(fn func(e *tests.Slice)) *factorySlice {
	slf.onSlice8 = fn
	return slf
}

func (slf *factorySlice) Seq(fn func(e *tests.Slice)) *factorySlice {
	slf.seq = fn
	return slf
}

func (slf *factorySlice) SeqInt(fn func(e *tests.Slice, n int)) *factorySlice {
	var seq int32
	slf.seqInt = func(e *tests.Slice) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factorySlice) SeqInt64(fn func(e *tests.Slice, n int64)) *factorySlice {
	var seq int64
	slf.seqInt64 = func(e *tests.Slice) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factorySlice) OnCreate(fn func(ctx context.Context, e *tests.Slice) error) *factorySlice {
	slf.onCreate = fn
	return slf
}

func (slf *factorySlice) MustBuild() tests.Slice {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factorySlice) MustBuildCtx(ctx context.Context) tests.Slice {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setSlice0 {
		slf.onSlice0(slf.entity)
	}

	if !slf.setSlice1 {
		slf.onSlice1(slf.entity)
	}

	if !slf.setSlice2 {
		slf.onSlice2(slf.entity)
	}

	if !slf.setSlice3 {
		slf.onSlice3(slf.entity)
	}

	if !slf.setSlice4 {
		slf.onSlice4(slf.entity)
	}

	if !slf.setSlice5 {
		slf.onSlice5(slf.entity)
	}

	if !slf.setSlice6 {
		slf.onSlice6(slf.entity)
	}

	if !slf.setSlice7 {
		slf.onSlice7(slf.entity)
	}

	if !slf.setSlice8 {
		slf.onSlice8(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
