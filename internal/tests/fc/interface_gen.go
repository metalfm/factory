// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
)

type factoryInterface struct {
	entity    *tests.Interface
	seq       func(e *tests.Interface)
	seqInt    func(e *tests.Interface)
	seqInt64  func(e *tests.Interface)
	onCreate  func(ctx context.Context, e *tests.Interface) error
	onField0  func(e *tests.Interface)
	setField0 bool
	onField2  func(e *tests.Interface)
	setField2 bool
	onField4  func(e *tests.Interface)
	setField4 bool
	onField5  func(e *tests.Interface)
	setField5 bool
}

func NewFactoryInterface(e tests.Interface) *factoryInterface {
	return &factoryInterface{
		entity:   &e,
		seq:      func(e *tests.Interface) {},
		seqInt:   func(e *tests.Interface) {},
		seqInt64: func(e *tests.Interface) {},
		onCreate: func(ctx context.Context, e *tests.Interface) error { return nil },
		onField0: func(e *tests.Interface) {},
		onField2: func(e *tests.Interface) {},
		onField4: func(e *tests.Interface) {},
		onField5: func(e *tests.Interface) {},
	}
}

func (slf *factoryInterface) Field0(v interface{}) *factoryInterface {
	slf.entity.Field0 = v
	slf.setField0 = true
	return slf
}

func (slf *factoryInterface) OnField0(fn func(e *tests.Interface)) *factoryInterface {
	slf.onField0 = fn
	return slf
}

func (slf *factoryInterface) Field2(v *interface{}) *factoryInterface {
	slf.entity.Field2 = v
	slf.setField2 = true
	return slf
}

func (slf *factoryInterface) OnField2(fn func(e *tests.Interface)) *factoryInterface {
	slf.onField2 = fn
	return slf
}

func (slf *factoryInterface) Field4(v *interface{}) *factoryInterface {
	slf.entity.Field4 = v
	slf.setField4 = true
	return slf
}

func (slf *factoryInterface) OnField4(fn func(e *tests.Interface)) *factoryInterface {
	slf.onField4 = fn
	return slf
}

func (slf *factoryInterface) Field5(v **interface{}) *factoryInterface {
	slf.entity.Field5 = v
	slf.setField5 = true
	return slf
}

func (slf *factoryInterface) OnField5(fn func(e *tests.Interface)) *factoryInterface {
	slf.onField5 = fn
	return slf
}

func (slf *factoryInterface) Seq(fn func(e *tests.Interface)) *factoryInterface {
	slf.seq = fn
	return slf
}

func (slf *factoryInterface) SeqInt(fn func(e *tests.Interface, n int)) *factoryInterface {
	var seq int32
	slf.seqInt = func(e *tests.Interface) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryInterface) SeqInt64(fn func(e *tests.Interface, n int64)) *factoryInterface {
	var seq int64
	slf.seqInt64 = func(e *tests.Interface) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryInterface) OnCreate(fn func(ctx context.Context, e *tests.Interface) error) *factoryInterface {
	slf.onCreate = fn
	return slf
}

func (slf *factoryInterface) MustBuild() tests.Interface {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryInterface) MustBuildCtx(ctx context.Context) tests.Interface {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setField0 {
		slf.onField0(slf.entity)
	}

	if !slf.setField2 {
		slf.onField2(slf.entity)
	}

	if !slf.setField4 {
		slf.onField4(slf.entity)
	}

	if !slf.setField5 {
		slf.onField5(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
