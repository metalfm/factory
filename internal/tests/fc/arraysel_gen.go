// Code generated by fcgen; DO NOT EDIT.

package fc_tests

import (
	context "context"
	tests "factory/internal/tests"
	fmt "fmt"
	atomic "sync/atomic"
	time "time"
	time1 "time"
)

type factoryArraySel struct {
	entity    *tests.ArraySel
	seq       func(e *tests.ArraySel)
	seqInt    func(e *tests.ArraySel)
	seqInt64  func(e *tests.ArraySel)
	onCreate  func(ctx context.Context, e *tests.ArraySel) error
	onArray0  func(e *tests.ArraySel)
	setArray0 bool
	onArray1  func(e *tests.ArraySel)
	setArray1 bool
	onArray2  func(e *tests.ArraySel)
	setArray2 bool
	onArray3  func(e *tests.ArraySel)
	setArray3 bool
	onArray4  func(e *tests.ArraySel)
	setArray4 bool
}

func NewFactoryArraySel(e tests.ArraySel) *factoryArraySel {
	return &factoryArraySel{
		entity:   &e,
		seq:      func(e *tests.ArraySel) {},
		seqInt:   func(e *tests.ArraySel) {},
		seqInt64: func(e *tests.ArraySel) {},
		onCreate: func(ctx context.Context, e *tests.ArraySel) error { return nil },
		onArray0: func(e *tests.ArraySel) {},
		onArray1: func(e *tests.ArraySel) {},
		onArray2: func(e *tests.ArraySel) {},
		onArray3: func(e *tests.ArraySel) {},
		onArray4: func(e *tests.ArraySel) {},
	}
}

func (slf *factoryArraySel) Array0(v [5]time.Time) *factoryArraySel {
	slf.entity.Array0 = v
	slf.setArray0 = true
	return slf
}

func (slf *factoryArraySel) OnArray0(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.onArray0 = fn
	return slf
}

func (slf *factoryArraySel) Array1(v **[5]time.Time) *factoryArraySel {
	slf.entity.Array1 = v
	slf.setArray1 = true
	return slf
}

func (slf *factoryArraySel) OnArray1(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.onArray1 = fn
	return slf
}

func (slf *factoryArraySel) Array2(v **[5]**time.Time) *factoryArraySel {
	slf.entity.Array2 = v
	slf.setArray2 = true
	return slf
}

func (slf *factoryArraySel) OnArray2(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.onArray2 = fn
	return slf
}

func (slf *factoryArraySel) Array3(v [5]**time1.Time) *factoryArraySel {
	slf.entity.Array3 = v
	slf.setArray3 = true
	return slf
}

func (slf *factoryArraySel) OnArray3(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.onArray3 = fn
	return slf
}

func (slf *factoryArraySel) Array4(v [1][2]**time1.Time) *factoryArraySel {
	slf.entity.Array4 = v
	slf.setArray4 = true
	return slf
}

func (slf *factoryArraySel) OnArray4(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.onArray4 = fn
	return slf
}

func (slf *factoryArraySel) Seq(fn func(e *tests.ArraySel)) *factoryArraySel {
	slf.seq = fn
	return slf
}

func (slf *factoryArraySel) SeqInt(fn func(e *tests.ArraySel, n int)) *factoryArraySel {
	var seq int32
	slf.seqInt = func(e *tests.ArraySel) {
		v := atomic.AddInt32(&seq, 1)
		fn(e, int(v))
	}
	return slf
}

func (slf *factoryArraySel) SeqInt64(fn func(e *tests.ArraySel, n int64)) *factoryArraySel {
	var seq int64
	slf.seqInt64 = func(e *tests.ArraySel) {
		v := atomic.AddInt64(&seq, 1)
		fn(e, v)
	}
	return slf
}

func (slf *factoryArraySel) OnCreate(fn func(ctx context.Context, e *tests.ArraySel) error) *factoryArraySel {
	slf.onCreate = fn
	return slf
}

func (slf *factoryArraySel) MustBuild() tests.ArraySel {
	return slf.MustBuildCtx(context.Background())
}

func (slf *factoryArraySel) MustBuildCtx(ctx context.Context) tests.ArraySel {
	slf.seq(slf.entity)
	slf.seqInt(slf.entity)
	slf.seqInt64(slf.entity)

	if !slf.setArray0 {
		slf.onArray0(slf.entity)
	}

	if !slf.setArray1 {
		slf.onArray1(slf.entity)
	}

	if !slf.setArray2 {
		slf.onArray2(slf.entity)
	}

	if !slf.setArray3 {
		slf.onArray3(slf.entity)
	}

	if !slf.setArray4 {
		slf.onArray4(slf.entity)
	}

	err := slf.onCreate(ctx, slf.entity)
	if err != nil {
		panic(fmt.Errorf("factory.OnCreate: %w", err))
	}

	return *slf.entity
}
